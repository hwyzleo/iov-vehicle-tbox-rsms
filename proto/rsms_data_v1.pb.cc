// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rsms_data_v1.proto

#include "rsms_data_v1.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_rsms_5fdata_5fv1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Alarm_rsms_5fdata_5fv1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rsms_5fdata_5fv1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BatteryTemperature_rsms_5fdata_5fv1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rsms_5fdata_5fv1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BatteryVoltage_rsms_5fdata_5fv1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rsms_5fdata_5fv1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DriveMotor_rsms_5fdata_5fv1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rsms_5fdata_5fv1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Extremum_rsms_5fdata_5fv1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rsms_5fdata_5fv1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_rsms_5fdata_5fv1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rsms_5fdata_5fv1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SingleBatteryTemperature_rsms_5fdata_5fv1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rsms_5fdata_5fv1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SingleBatteryVoltage_rsms_5fdata_5fv1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rsms_5fdata_5fv1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SingleDriveMotor_rsms_5fdata_5fv1_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rsms_5fdata_5fv1_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VehicleData_rsms_5fdata_5fv1_2eproto;
namespace tbox {
namespace mcu {
namespace rsms {
namespace v1 {
class VehicleDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleData> _instance;
} _VehicleData_default_instance_;
class DriveMotorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DriveMotor> _instance;
} _DriveMotor_default_instance_;
class SingleDriveMotorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleDriveMotor> _instance;
} _SingleDriveMotor_default_instance_;
class PositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Position> _instance;
} _Position_default_instance_;
class ExtremumDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Extremum> _instance;
} _Extremum_default_instance_;
class AlarmDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Alarm> _instance;
} _Alarm_default_instance_;
class BatteryVoltageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BatteryVoltage> _instance;
} _BatteryVoltage_default_instance_;
class SingleBatteryVoltageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleBatteryVoltage> _instance;
} _SingleBatteryVoltage_default_instance_;
class BatteryTemperatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BatteryTemperature> _instance;
} _BatteryTemperature_default_instance_;
class SingleBatteryTemperatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleBatteryTemperature> _instance;
} _SingleBatteryTemperature_default_instance_;
class RsmsDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RsmsData> _instance;
} _RsmsData_default_instance_;
}  // namespace v1
}  // namespace rsms
}  // namespace mcu
}  // namespace tbox
static void InitDefaultsscc_info_Alarm_rsms_5fdata_5fv1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tbox::mcu::rsms::v1::_Alarm_default_instance_;
    new (ptr) ::tbox::mcu::rsms::v1::Alarm();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tbox::mcu::rsms::v1::Alarm::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Alarm_rsms_5fdata_5fv1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Alarm_rsms_5fdata_5fv1_2eproto}, {}};

static void InitDefaultsscc_info_BatteryTemperature_rsms_5fdata_5fv1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tbox::mcu::rsms::v1::_BatteryTemperature_default_instance_;
    new (ptr) ::tbox::mcu::rsms::v1::BatteryTemperature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tbox::mcu::rsms::v1::BatteryTemperature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BatteryTemperature_rsms_5fdata_5fv1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BatteryTemperature_rsms_5fdata_5fv1_2eproto}, {
      &scc_info_SingleBatteryTemperature_rsms_5fdata_5fv1_2eproto.base,}};

static void InitDefaultsscc_info_BatteryVoltage_rsms_5fdata_5fv1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tbox::mcu::rsms::v1::_BatteryVoltage_default_instance_;
    new (ptr) ::tbox::mcu::rsms::v1::BatteryVoltage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tbox::mcu::rsms::v1::BatteryVoltage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BatteryVoltage_rsms_5fdata_5fv1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BatteryVoltage_rsms_5fdata_5fv1_2eproto}, {
      &scc_info_SingleBatteryVoltage_rsms_5fdata_5fv1_2eproto.base,}};

static void InitDefaultsscc_info_DriveMotor_rsms_5fdata_5fv1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tbox::mcu::rsms::v1::_DriveMotor_default_instance_;
    new (ptr) ::tbox::mcu::rsms::v1::DriveMotor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tbox::mcu::rsms::v1::DriveMotor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DriveMotor_rsms_5fdata_5fv1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DriveMotor_rsms_5fdata_5fv1_2eproto}, {
      &scc_info_SingleDriveMotor_rsms_5fdata_5fv1_2eproto.base,}};

static void InitDefaultsscc_info_Extremum_rsms_5fdata_5fv1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tbox::mcu::rsms::v1::_Extremum_default_instance_;
    new (ptr) ::tbox::mcu::rsms::v1::Extremum();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tbox::mcu::rsms::v1::Extremum::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Extremum_rsms_5fdata_5fv1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Extremum_rsms_5fdata_5fv1_2eproto}, {}};

static void InitDefaultsscc_info_Position_rsms_5fdata_5fv1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tbox::mcu::rsms::v1::_Position_default_instance_;
    new (ptr) ::tbox::mcu::rsms::v1::Position();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tbox::mcu::rsms::v1::Position::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_rsms_5fdata_5fv1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Position_rsms_5fdata_5fv1_2eproto}, {}};

static void InitDefaultsscc_info_RsmsData_rsms_5fdata_5fv1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tbox::mcu::rsms::v1::_RsmsData_default_instance_;
    new (ptr) ::tbox::mcu::rsms::v1::RsmsData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tbox::mcu::rsms::v1::RsmsData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_RsmsData_rsms_5fdata_5fv1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_RsmsData_rsms_5fdata_5fv1_2eproto}, {
      &scc_info_VehicleData_rsms_5fdata_5fv1_2eproto.base,
      &scc_info_DriveMotor_rsms_5fdata_5fv1_2eproto.base,
      &scc_info_Position_rsms_5fdata_5fv1_2eproto.base,
      &scc_info_Extremum_rsms_5fdata_5fv1_2eproto.base,
      &scc_info_Alarm_rsms_5fdata_5fv1_2eproto.base,
      &scc_info_BatteryVoltage_rsms_5fdata_5fv1_2eproto.base,
      &scc_info_BatteryTemperature_rsms_5fdata_5fv1_2eproto.base,}};

static void InitDefaultsscc_info_SingleBatteryTemperature_rsms_5fdata_5fv1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tbox::mcu::rsms::v1::_SingleBatteryTemperature_default_instance_;
    new (ptr) ::tbox::mcu::rsms::v1::SingleBatteryTemperature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tbox::mcu::rsms::v1::SingleBatteryTemperature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SingleBatteryTemperature_rsms_5fdata_5fv1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SingleBatteryTemperature_rsms_5fdata_5fv1_2eproto}, {}};

static void InitDefaultsscc_info_SingleBatteryVoltage_rsms_5fdata_5fv1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tbox::mcu::rsms::v1::_SingleBatteryVoltage_default_instance_;
    new (ptr) ::tbox::mcu::rsms::v1::SingleBatteryVoltage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tbox::mcu::rsms::v1::SingleBatteryVoltage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SingleBatteryVoltage_rsms_5fdata_5fv1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SingleBatteryVoltage_rsms_5fdata_5fv1_2eproto}, {}};

static void InitDefaultsscc_info_SingleDriveMotor_rsms_5fdata_5fv1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tbox::mcu::rsms::v1::_SingleDriveMotor_default_instance_;
    new (ptr) ::tbox::mcu::rsms::v1::SingleDriveMotor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tbox::mcu::rsms::v1::SingleDriveMotor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SingleDriveMotor_rsms_5fdata_5fv1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SingleDriveMotor_rsms_5fdata_5fv1_2eproto}, {}};

static void InitDefaultsscc_info_VehicleData_rsms_5fdata_5fv1_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tbox::mcu::rsms::v1::_VehicleData_default_instance_;
    new (ptr) ::tbox::mcu::rsms::v1::VehicleData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tbox::mcu::rsms::v1::VehicleData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VehicleData_rsms_5fdata_5fv1_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VehicleData_rsms_5fdata_5fv1_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_rsms_5fdata_5fv1_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_rsms_5fdata_5fv1_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_rsms_5fdata_5fv1_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_rsms_5fdata_5fv1_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::VehicleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::VehicleData, vehicle_state_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::VehicleData, charging_state_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::VehicleData, running_mode_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::VehicleData, speed_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::VehicleData, total_odometer_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::VehicleData, total_voltage_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::VehicleData, total_current_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::VehicleData, soc_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::VehicleData, dcdc_state_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::VehicleData, driving_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::VehicleData, braking_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::VehicleData, gear_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::VehicleData, insulation_resistance_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::VehicleData, accelerator_pedal_position_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::VehicleData, brake_pedal_position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::DriveMotor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::DriveMotor, drive_motor_count_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::DriveMotor, drive_motor_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::SingleDriveMotor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::SingleDriveMotor, sn_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::SingleDriveMotor, state_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::SingleDriveMotor, controller_temperature_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::SingleDriveMotor, speed_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::SingleDriveMotor, torque_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::SingleDriveMotor, temperature_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::SingleDriveMotor, controller_input_voltage_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::SingleDriveMotor, controller_dc_bus_current_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::Position, position_valid_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::Position, south_latitude_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::Position, west_longitude_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::Position, longitude_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::Position, latitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::Extremum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::Extremum, max_voltage_battery_device_no_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::Extremum, max_voltage_cell_no_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::Extremum, cell_max_voltage_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::Extremum, min_voltage_battery_device_no_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::Extremum, min_voltage_cell_no_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::Extremum, cell_min_voltage_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::Extremum, max_temperature_device_no_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::Extremum, max_temperature_probe_no_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::Extremum, max_temperature_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::Extremum, min_temperature_device_no_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::Extremum, min_temperature_probe_no_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::Extremum, min_temperature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::Alarm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::Alarm, max_alarm_level_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::Alarm, alarm_flag_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::Alarm, battery_fault_count_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::Alarm, battery_fault_list_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::Alarm, drive_motor_fault_count_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::Alarm, drive_motor_fault_list_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::Alarm, engine_fault_count_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::Alarm, engine_fault_list_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::Alarm, other_fault_count_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::Alarm, other_fault_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::BatteryVoltage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::BatteryVoltage, battery_count_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::BatteryVoltage, battery_voltage_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::SingleBatteryVoltage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::SingleBatteryVoltage, sn_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::SingleBatteryVoltage, voltage_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::SingleBatteryVoltage, current_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::SingleBatteryVoltage, cell_count_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::SingleBatteryVoltage, frame_start_cell_sn_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::SingleBatteryVoltage, frame_cell_count_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::SingleBatteryVoltage, cell_voltage_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::BatteryTemperature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::BatteryTemperature, battery_count_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::BatteryTemperature, battery_temperature_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::SingleBatteryTemperature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::SingleBatteryTemperature, sn_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::SingleBatteryTemperature, probe_count_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::SingleBatteryTemperature, temperatures_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::RsmsData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::RsmsData, vehicle_data_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::RsmsData, drive_motor_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::RsmsData, position_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::RsmsData, extremum_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::RsmsData, alarm_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::RsmsData, battery_voltage_),
  PROTOBUF_FIELD_OFFSET(::tbox::mcu::rsms::v1::RsmsData, battery_temperature_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tbox::mcu::rsms::v1::VehicleData)},
  { 20, -1, sizeof(::tbox::mcu::rsms::v1::DriveMotor)},
  { 27, -1, sizeof(::tbox::mcu::rsms::v1::SingleDriveMotor)},
  { 40, -1, sizeof(::tbox::mcu::rsms::v1::Position)},
  { 50, -1, sizeof(::tbox::mcu::rsms::v1::Extremum)},
  { 67, -1, sizeof(::tbox::mcu::rsms::v1::Alarm)},
  { 82, -1, sizeof(::tbox::mcu::rsms::v1::BatteryVoltage)},
  { 89, -1, sizeof(::tbox::mcu::rsms::v1::SingleBatteryVoltage)},
  { 101, -1, sizeof(::tbox::mcu::rsms::v1::BatteryTemperature)},
  { 108, -1, sizeof(::tbox::mcu::rsms::v1::SingleBatteryTemperature)},
  { 116, -1, sizeof(::tbox::mcu::rsms::v1::RsmsData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tbox::mcu::rsms::v1::_VehicleData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tbox::mcu::rsms::v1::_DriveMotor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tbox::mcu::rsms::v1::_SingleDriveMotor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tbox::mcu::rsms::v1::_Position_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tbox::mcu::rsms::v1::_Extremum_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tbox::mcu::rsms::v1::_Alarm_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tbox::mcu::rsms::v1::_BatteryVoltage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tbox::mcu::rsms::v1::_SingleBatteryVoltage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tbox::mcu::rsms::v1::_BatteryTemperature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tbox::mcu::rsms::v1::_SingleBatteryTemperature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tbox::mcu::rsms::v1::_RsmsData_default_instance_),
};

const char descriptor_table_protodef_rsms_5fdata_5fv1_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022rsms_data_v1.proto\022\020tbox.mcu.rsms.v1\"\331"
  "\002\n\013VehicleData\022\025\n\rvehicle_state\030\001 \001(\r\022\026\n"
  "\016charging_state\030\002 \001(\r\022\024\n\014running_mode\030\003 "
  "\001(\r\022\r\n\005speed\030\004 \001(\r\022\026\n\016total_odometer\030\005 \001"
  "(\r\022\025\n\rtotal_voltage\030\006 \001(\r\022\025\n\rtotal_curre"
  "nt\030\007 \001(\r\022\013\n\003soc\030\010 \001(\r\022\022\n\ndcdc_state\030\t \001("
  "\r\022\017\n\007driving\030\n \001(\010\022\017\n\007braking\030\013 \001(\010\022\014\n\004g"
  "ear\030\014 \001(\r\022\035\n\025insulation_resistance\030\r \001(\r"
  "\022\"\n\032accelerator_pedal_position\030\016 \001(\r\022\034\n\024"
  "brake_pedal_position\030\017 \001(\r\"e\n\nDriveMotor"
  "\022\031\n\021drive_motor_count\030\001 \001(\r\022<\n\020drive_mot"
  "or_list\030\002 \003(\0132\".tbox.mcu.rsms.v1.SingleD"
  "riveMotor\"\306\001\n\020SingleDriveMotor\022\n\n\002sn\030\001 \001"
  "(\r\022\r\n\005state\030\002 \001(\r\022\036\n\026controller_temperat"
  "ure\030\003 \001(\r\022\r\n\005speed\030\004 \001(\r\022\016\n\006torque\030\005 \001(\r"
  "\022\023\n\013temperature\030\006 \001(\r\022 \n\030controller_inpu"
  "t_voltage\030\007 \001(\r\022!\n\031controller_dc_bus_cur"
  "rent\030\010 \001(\r\"w\n\010Position\022\026\n\016position_valid"
  "\030\001 \001(\010\022\026\n\016south_latitude\030\002 \001(\010\022\026\n\016west_l"
  "ongitude\030\003 \001(\010\022\021\n\tlongitude\030\004 \001(\r\022\020\n\010lat"
  "itude\030\005 \001(\r\"\202\003\n\010Extremum\022%\n\035max_voltage_"
  "battery_device_no\030\001 \001(\r\022\033\n\023max_voltage_c"
  "ell_no\030\002 \001(\r\022\030\n\020cell_max_voltage\030\003 \001(\r\022%"
  "\n\035min_voltage_battery_device_no\030\004 \001(\r\022\033\n"
  "\023min_voltage_cell_no\030\005 \001(\r\022\030\n\020cell_min_v"
  "oltage\030\006 \001(\r\022!\n\031max_temperature_device_n"
  "o\030\007 \001(\r\022 \n\030max_temperature_probe_no\030\010 \001("
  "\r\022\027\n\017max_temperature\030\t \001(\r\022!\n\031min_temper"
  "ature_device_no\030\n \001(\r\022 \n\030min_temperature"
  "_probe_no\030\013 \001(\r\022\027\n\017min_temperature\030\014 \001(\r"
  "\"\232\002\n\005Alarm\022\027\n\017max_alarm_level\030\001 \001(\r\022\022\n\na"
  "larm_flag\030\002 \001(\r\022\033\n\023battery_fault_count\030\003"
  " \001(\r\022\032\n\022battery_fault_list\030\004 \003(\r\022\037\n\027driv"
  "e_motor_fault_count\030\005 \001(\r\022\036\n\026drive_motor"
  "_fault_list\030\006 \003(\r\022\032\n\022engine_fault_count\030"
  "\007 \001(\r\022\031\n\021engine_fault_list\030\010 \003(\r\022\031\n\021othe"
  "r_fault_count\030\t \001(\r\022\030\n\020other_fault_list\030"
  "\n \003(\r\"m\n\016BatteryVoltage\022\025\n\rbattery_count"
  "\030\001 \001(\r\022D\n\024battery_voltage_list\030\002 \003(\0132&.t"
  "box.mcu.rsms.v1.SingleBatteryVoltage\"\252\001\n"
  "\024SingleBatteryVoltage\022\n\n\002sn\030\001 \001(\r\022\017\n\007vol"
  "tage\030\002 \001(\r\022\017\n\007current\030\003 \001(\r\022\022\n\ncell_coun"
  "t\030\004 \001(\r\022\033\n\023frame_start_cell_sn\030\005 \001(\r\022\030\n\020"
  "frame_cell_count\030\006 \001(\r\022\031\n\021cell_voltage_l"
  "ist\030\007 \003(\r\"y\n\022BatteryTemperature\022\025\n\rbatte"
  "ry_count\030\001 \001(\r\022L\n\030battery_temperature_li"
  "st\030\002 \003(\0132*.tbox.mcu.rsms.v1.SingleBatter"
  "yTemperature\"Q\n\030SingleBatteryTemperature"
  "\022\n\n\002sn\030\001 \001(\r\022\023\n\013probe_count\030\002 \001(\r\022\024\n\014tem"
  "peratures\030\003 \003(\r\"\364\002\n\010RsmsData\0223\n\014vehicle_"
  "data\030\001 \001(\0132\035.tbox.mcu.rsms.v1.VehicleDat"
  "a\0221\n\013drive_motor\030\002 \001(\0132\034.tbox.mcu.rsms.v"
  "1.DriveMotor\022,\n\010position\030\003 \001(\0132\032.tbox.mc"
  "u.rsms.v1.Position\022,\n\010extremum\030\004 \001(\0132\032.t"
  "box.mcu.rsms.v1.Extremum\022&\n\005alarm\030\005 \001(\0132"
  "\027.tbox.mcu.rsms.v1.Alarm\0229\n\017battery_volt"
  "age\030\006 \001(\0132 .tbox.mcu.rsms.v1.BatteryVolt"
  "age\022A\n\023battery_temperature\030\007 \001(\0132$.tbox."
  "mcu.rsms.v1.BatteryTemperatureb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_rsms_5fdata_5fv1_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_rsms_5fdata_5fv1_2eproto_sccs[11] = {
  &scc_info_Alarm_rsms_5fdata_5fv1_2eproto.base,
  &scc_info_BatteryTemperature_rsms_5fdata_5fv1_2eproto.base,
  &scc_info_BatteryVoltage_rsms_5fdata_5fv1_2eproto.base,
  &scc_info_DriveMotor_rsms_5fdata_5fv1_2eproto.base,
  &scc_info_Extremum_rsms_5fdata_5fv1_2eproto.base,
  &scc_info_Position_rsms_5fdata_5fv1_2eproto.base,
  &scc_info_RsmsData_rsms_5fdata_5fv1_2eproto.base,
  &scc_info_SingleBatteryTemperature_rsms_5fdata_5fv1_2eproto.base,
  &scc_info_SingleBatteryVoltage_rsms_5fdata_5fv1_2eproto.base,
  &scc_info_SingleDriveMotor_rsms_5fdata_5fv1_2eproto.base,
  &scc_info_VehicleData_rsms_5fdata_5fv1_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_rsms_5fdata_5fv1_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rsms_5fdata_5fv1_2eproto = {
  false, false, descriptor_table_protodef_rsms_5fdata_5fv1_2eproto, "rsms_data_v1.proto", 2358,
  &descriptor_table_rsms_5fdata_5fv1_2eproto_once, descriptor_table_rsms_5fdata_5fv1_2eproto_sccs, descriptor_table_rsms_5fdata_5fv1_2eproto_deps, 11, 0,
  schemas, file_default_instances, TableStruct_rsms_5fdata_5fv1_2eproto::offsets,
  file_level_metadata_rsms_5fdata_5fv1_2eproto, 11, file_level_enum_descriptors_rsms_5fdata_5fv1_2eproto, file_level_service_descriptors_rsms_5fdata_5fv1_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_rsms_5fdata_5fv1_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_rsms_5fdata_5fv1_2eproto)), true);
namespace tbox {
namespace mcu {
namespace rsms {
namespace v1 {

// ===================================================================

void VehicleData::InitAsDefaultInstance() {
}
class VehicleData::_Internal {
 public:
};

VehicleData::VehicleData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tbox.mcu.rsms.v1.VehicleData)
}
VehicleData::VehicleData(const VehicleData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&vehicle_state_, &from.vehicle_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&brake_pedal_position_) -
    reinterpret_cast<char*>(&vehicle_state_)) + sizeof(brake_pedal_position_));
  // @@protoc_insertion_point(copy_constructor:tbox.mcu.rsms.v1.VehicleData)
}

void VehicleData::SharedCtor() {
  ::memset(&vehicle_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brake_pedal_position_) -
      reinterpret_cast<char*>(&vehicle_state_)) + sizeof(brake_pedal_position_));
}

VehicleData::~VehicleData() {
  // @@protoc_insertion_point(destructor:tbox.mcu.rsms.v1.VehicleData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VehicleData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VehicleData::ArenaDtor(void* object) {
  VehicleData* _this = reinterpret_cast< VehicleData* >(object);
  (void)_this;
}
void VehicleData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VehicleData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleData& VehicleData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleData_rsms_5fdata_5fv1_2eproto.base);
  return *internal_default_instance();
}


void VehicleData::Clear() {
// @@protoc_insertion_point(message_clear_start:tbox.mcu.rsms.v1.VehicleData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vehicle_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brake_pedal_position_) -
      reinterpret_cast<char*>(&vehicle_state_)) + sizeof(brake_pedal_position_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 vehicle_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          vehicle_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 charging_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          charging_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 running_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          running_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 speed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 total_odometer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          total_odometer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 total_voltage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          total_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 total_current = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          total_current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 soc = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          soc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 dcdc_state = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          dcdc_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool driving = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          driving_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool braking = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          braking_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 gear = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          gear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 insulation_resistance = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          insulation_resistance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 accelerator_pedal_position = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          accelerator_pedal_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 brake_pedal_position = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          brake_pedal_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.mcu.rsms.v1.VehicleData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vehicle_state = 1;
  if (this->vehicle_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vehicle_state(), target);
  }

  // uint32 charging_state = 2;
  if (this->charging_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_charging_state(), target);
  }

  // uint32 running_mode = 3;
  if (this->running_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_running_mode(), target);
  }

  // uint32 speed = 4;
  if (this->speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_speed(), target);
  }

  // uint32 total_odometer = 5;
  if (this->total_odometer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_total_odometer(), target);
  }

  // uint32 total_voltage = 6;
  if (this->total_voltage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_total_voltage(), target);
  }

  // uint32 total_current = 7;
  if (this->total_current() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_total_current(), target);
  }

  // uint32 soc = 8;
  if (this->soc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_soc(), target);
  }

  // uint32 dcdc_state = 9;
  if (this->dcdc_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_dcdc_state(), target);
  }

  // bool driving = 10;
  if (this->driving() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_driving(), target);
  }

  // bool braking = 11;
  if (this->braking() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_braking(), target);
  }

  // uint32 gear = 12;
  if (this->gear() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_gear(), target);
  }

  // uint32 insulation_resistance = 13;
  if (this->insulation_resistance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_insulation_resistance(), target);
  }

  // uint32 accelerator_pedal_position = 14;
  if (this->accelerator_pedal_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_accelerator_pedal_position(), target);
  }

  // uint32 brake_pedal_position = 15;
  if (this->brake_pedal_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_brake_pedal_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.mcu.rsms.v1.VehicleData)
  return target;
}

size_t VehicleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tbox.mcu.rsms.v1.VehicleData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 vehicle_state = 1;
  if (this->vehicle_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_vehicle_state());
  }

  // uint32 charging_state = 2;
  if (this->charging_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_charging_state());
  }

  // uint32 running_mode = 3;
  if (this->running_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_running_mode());
  }

  // uint32 speed = 4;
  if (this->speed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_speed());
  }

  // uint32 total_odometer = 5;
  if (this->total_odometer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_odometer());
  }

  // uint32 total_voltage = 6;
  if (this->total_voltage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_voltage());
  }

  // uint32 total_current = 7;
  if (this->total_current() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_current());
  }

  // uint32 soc = 8;
  if (this->soc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_soc());
  }

  // uint32 dcdc_state = 9;
  if (this->dcdc_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dcdc_state());
  }

  // bool driving = 10;
  if (this->driving() != 0) {
    total_size += 1 + 1;
  }

  // bool braking = 11;
  if (this->braking() != 0) {
    total_size += 1 + 1;
  }

  // uint32 gear = 12;
  if (this->gear() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gear());
  }

  // uint32 insulation_resistance = 13;
  if (this->insulation_resistance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_insulation_resistance());
  }

  // uint32 accelerator_pedal_position = 14;
  if (this->accelerator_pedal_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_accelerator_pedal_position());
  }

  // uint32 brake_pedal_position = 15;
  if (this->brake_pedal_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_brake_pedal_position());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tbox.mcu.rsms.v1.VehicleData)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tbox.mcu.rsms.v1.VehicleData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tbox.mcu.rsms.v1.VehicleData)
    MergeFrom(*source);
  }
}

void VehicleData::MergeFrom(const VehicleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tbox.mcu.rsms.v1.VehicleData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vehicle_state() != 0) {
    _internal_set_vehicle_state(from._internal_vehicle_state());
  }
  if (from.charging_state() != 0) {
    _internal_set_charging_state(from._internal_charging_state());
  }
  if (from.running_mode() != 0) {
    _internal_set_running_mode(from._internal_running_mode());
  }
  if (from.speed() != 0) {
    _internal_set_speed(from._internal_speed());
  }
  if (from.total_odometer() != 0) {
    _internal_set_total_odometer(from._internal_total_odometer());
  }
  if (from.total_voltage() != 0) {
    _internal_set_total_voltage(from._internal_total_voltage());
  }
  if (from.total_current() != 0) {
    _internal_set_total_current(from._internal_total_current());
  }
  if (from.soc() != 0) {
    _internal_set_soc(from._internal_soc());
  }
  if (from.dcdc_state() != 0) {
    _internal_set_dcdc_state(from._internal_dcdc_state());
  }
  if (from.driving() != 0) {
    _internal_set_driving(from._internal_driving());
  }
  if (from.braking() != 0) {
    _internal_set_braking(from._internal_braking());
  }
  if (from.gear() != 0) {
    _internal_set_gear(from._internal_gear());
  }
  if (from.insulation_resistance() != 0) {
    _internal_set_insulation_resistance(from._internal_insulation_resistance());
  }
  if (from.accelerator_pedal_position() != 0) {
    _internal_set_accelerator_pedal_position(from._internal_accelerator_pedal_position());
  }
  if (from.brake_pedal_position() != 0) {
    _internal_set_brake_pedal_position(from._internal_brake_pedal_position());
  }
}

void VehicleData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tbox.mcu.rsms.v1.VehicleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleData::CopyFrom(const VehicleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tbox.mcu.rsms.v1.VehicleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleData::IsInitialized() const {
  return true;
}

void VehicleData::InternalSwap(VehicleData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleData, brake_pedal_position_)
      + sizeof(VehicleData::brake_pedal_position_)
      - PROTOBUF_FIELD_OFFSET(VehicleData, vehicle_state_)>(
          reinterpret_cast<char*>(&vehicle_state_),
          reinterpret_cast<char*>(&other->vehicle_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DriveMotor::InitAsDefaultInstance() {
}
class DriveMotor::_Internal {
 public:
};

DriveMotor::DriveMotor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  drive_motor_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tbox.mcu.rsms.v1.DriveMotor)
}
DriveMotor::DriveMotor(const DriveMotor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      drive_motor_list_(from.drive_motor_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  drive_motor_count_ = from.drive_motor_count_;
  // @@protoc_insertion_point(copy_constructor:tbox.mcu.rsms.v1.DriveMotor)
}

void DriveMotor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DriveMotor_rsms_5fdata_5fv1_2eproto.base);
  drive_motor_count_ = 0u;
}

DriveMotor::~DriveMotor() {
  // @@protoc_insertion_point(destructor:tbox.mcu.rsms.v1.DriveMotor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DriveMotor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DriveMotor::ArenaDtor(void* object) {
  DriveMotor* _this = reinterpret_cast< DriveMotor* >(object);
  (void)_this;
}
void DriveMotor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DriveMotor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DriveMotor& DriveMotor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DriveMotor_rsms_5fdata_5fv1_2eproto.base);
  return *internal_default_instance();
}


void DriveMotor::Clear() {
// @@protoc_insertion_point(message_clear_start:tbox.mcu.rsms.v1.DriveMotor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  drive_motor_list_.Clear();
  drive_motor_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DriveMotor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 drive_motor_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          drive_motor_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tbox.mcu.rsms.v1.SingleDriveMotor drive_motor_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drive_motor_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DriveMotor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.mcu.rsms.v1.DriveMotor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 drive_motor_count = 1;
  if (this->drive_motor_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_drive_motor_count(), target);
  }

  // repeated .tbox.mcu.rsms.v1.SingleDriveMotor drive_motor_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_drive_motor_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_drive_motor_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.mcu.rsms.v1.DriveMotor)
  return target;
}

size_t DriveMotor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tbox.mcu.rsms.v1.DriveMotor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tbox.mcu.rsms.v1.SingleDriveMotor drive_motor_list = 2;
  total_size += 1UL * this->_internal_drive_motor_list_size();
  for (const auto& msg : this->drive_motor_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 drive_motor_count = 1;
  if (this->drive_motor_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_drive_motor_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DriveMotor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tbox.mcu.rsms.v1.DriveMotor)
  GOOGLE_DCHECK_NE(&from, this);
  const DriveMotor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DriveMotor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tbox.mcu.rsms.v1.DriveMotor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tbox.mcu.rsms.v1.DriveMotor)
    MergeFrom(*source);
  }
}

void DriveMotor::MergeFrom(const DriveMotor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tbox.mcu.rsms.v1.DriveMotor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  drive_motor_list_.MergeFrom(from.drive_motor_list_);
  if (from.drive_motor_count() != 0) {
    _internal_set_drive_motor_count(from._internal_drive_motor_count());
  }
}

void DriveMotor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tbox.mcu.rsms.v1.DriveMotor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DriveMotor::CopyFrom(const DriveMotor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tbox.mcu.rsms.v1.DriveMotor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DriveMotor::IsInitialized() const {
  return true;
}

void DriveMotor::InternalSwap(DriveMotor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  drive_motor_list_.InternalSwap(&other->drive_motor_list_);
  swap(drive_motor_count_, other->drive_motor_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DriveMotor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleDriveMotor::InitAsDefaultInstance() {
}
class SingleDriveMotor::_Internal {
 public:
};

SingleDriveMotor::SingleDriveMotor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tbox.mcu.rsms.v1.SingleDriveMotor)
}
SingleDriveMotor::SingleDriveMotor(const SingleDriveMotor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sn_, &from.sn_,
    static_cast<size_t>(reinterpret_cast<char*>(&controller_dc_bus_current_) -
    reinterpret_cast<char*>(&sn_)) + sizeof(controller_dc_bus_current_));
  // @@protoc_insertion_point(copy_constructor:tbox.mcu.rsms.v1.SingleDriveMotor)
}

void SingleDriveMotor::SharedCtor() {
  ::memset(&sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&controller_dc_bus_current_) -
      reinterpret_cast<char*>(&sn_)) + sizeof(controller_dc_bus_current_));
}

SingleDriveMotor::~SingleDriveMotor() {
  // @@protoc_insertion_point(destructor:tbox.mcu.rsms.v1.SingleDriveMotor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SingleDriveMotor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SingleDriveMotor::ArenaDtor(void* object) {
  SingleDriveMotor* _this = reinterpret_cast< SingleDriveMotor* >(object);
  (void)_this;
}
void SingleDriveMotor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleDriveMotor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleDriveMotor& SingleDriveMotor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleDriveMotor_rsms_5fdata_5fv1_2eproto.base);
  return *internal_default_instance();
}


void SingleDriveMotor::Clear() {
// @@protoc_insertion_point(message_clear_start:tbox.mcu.rsms.v1.SingleDriveMotor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&controller_dc_bus_current_) -
      reinterpret_cast<char*>(&sn_)) + sizeof(controller_dc_bus_current_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleDriveMotor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 controller_temperature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          controller_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 speed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 torque = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          torque_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 temperature = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 controller_input_voltage = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          controller_input_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 controller_dc_bus_current = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          controller_dc_bus_current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleDriveMotor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.mcu.rsms.v1.SingleDriveMotor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sn = 1;
  if (this->sn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sn(), target);
  }

  // uint32 state = 2;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_state(), target);
  }

  // uint32 controller_temperature = 3;
  if (this->controller_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_controller_temperature(), target);
  }

  // uint32 speed = 4;
  if (this->speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_speed(), target);
  }

  // uint32 torque = 5;
  if (this->torque() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_torque(), target);
  }

  // uint32 temperature = 6;
  if (this->temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_temperature(), target);
  }

  // uint32 controller_input_voltage = 7;
  if (this->controller_input_voltage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_controller_input_voltage(), target);
  }

  // uint32 controller_dc_bus_current = 8;
  if (this->controller_dc_bus_current() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_controller_dc_bus_current(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.mcu.rsms.v1.SingleDriveMotor)
  return target;
}

size_t SingleDriveMotor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tbox.mcu.rsms.v1.SingleDriveMotor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 sn = 1;
  if (this->sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sn());
  }

  // uint32 state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_state());
  }

  // uint32 controller_temperature = 3;
  if (this->controller_temperature() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_controller_temperature());
  }

  // uint32 speed = 4;
  if (this->speed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_speed());
  }

  // uint32 torque = 5;
  if (this->torque() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_torque());
  }

  // uint32 temperature = 6;
  if (this->temperature() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_temperature());
  }

  // uint32 controller_input_voltage = 7;
  if (this->controller_input_voltage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_controller_input_voltage());
  }

  // uint32 controller_dc_bus_current = 8;
  if (this->controller_dc_bus_current() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_controller_dc_bus_current());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleDriveMotor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tbox.mcu.rsms.v1.SingleDriveMotor)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleDriveMotor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleDriveMotor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tbox.mcu.rsms.v1.SingleDriveMotor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tbox.mcu.rsms.v1.SingleDriveMotor)
    MergeFrom(*source);
  }
}

void SingleDriveMotor::MergeFrom(const SingleDriveMotor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tbox.mcu.rsms.v1.SingleDriveMotor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sn() != 0) {
    _internal_set_sn(from._internal_sn());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.controller_temperature() != 0) {
    _internal_set_controller_temperature(from._internal_controller_temperature());
  }
  if (from.speed() != 0) {
    _internal_set_speed(from._internal_speed());
  }
  if (from.torque() != 0) {
    _internal_set_torque(from._internal_torque());
  }
  if (from.temperature() != 0) {
    _internal_set_temperature(from._internal_temperature());
  }
  if (from.controller_input_voltage() != 0) {
    _internal_set_controller_input_voltage(from._internal_controller_input_voltage());
  }
  if (from.controller_dc_bus_current() != 0) {
    _internal_set_controller_dc_bus_current(from._internal_controller_dc_bus_current());
  }
}

void SingleDriveMotor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tbox.mcu.rsms.v1.SingleDriveMotor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleDriveMotor::CopyFrom(const SingleDriveMotor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tbox.mcu.rsms.v1.SingleDriveMotor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleDriveMotor::IsInitialized() const {
  return true;
}

void SingleDriveMotor::InternalSwap(SingleDriveMotor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleDriveMotor, controller_dc_bus_current_)
      + sizeof(SingleDriveMotor::controller_dc_bus_current_)
      - PROTOBUF_FIELD_OFFSET(SingleDriveMotor, sn_)>(
          reinterpret_cast<char*>(&sn_),
          reinterpret_cast<char*>(&other->sn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleDriveMotor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Position::InitAsDefaultInstance() {
}
class Position::_Internal {
 public:
};

Position::Position(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tbox.mcu.rsms.v1.Position)
}
Position::Position(const Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&position_valid_, &from.position_valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&latitude_) -
    reinterpret_cast<char*>(&position_valid_)) + sizeof(latitude_));
  // @@protoc_insertion_point(copy_constructor:tbox.mcu.rsms.v1.Position)
}

void Position::SharedCtor() {
  ::memset(&position_valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latitude_) -
      reinterpret_cast<char*>(&position_valid_)) + sizeof(latitude_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:tbox.mcu.rsms.v1.Position)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Position::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Position::ArenaDtor(void* object) {
  Position* _this = reinterpret_cast< Position* >(object);
  (void)_this;
}
void Position::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Position& Position::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Position_rsms_5fdata_5fv1_2eproto.base);
  return *internal_default_instance();
}


void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:tbox.mcu.rsms.v1.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&position_valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latitude_) -
      reinterpret_cast<char*>(&position_valid_)) + sizeof(latitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Position::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool position_valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          position_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool south_latitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          south_latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool west_longitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          west_longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 longitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 latitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Position::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.mcu.rsms.v1.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool position_valid = 1;
  if (this->position_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_position_valid(), target);
  }

  // bool south_latitude = 2;
  if (this->south_latitude() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_south_latitude(), target);
  }

  // bool west_longitude = 3;
  if (this->west_longitude() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_west_longitude(), target);
  }

  // uint32 longitude = 4;
  if (this->longitude() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_longitude(), target);
  }

  // uint32 latitude = 5;
  if (this->latitude() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_latitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.mcu.rsms.v1.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tbox.mcu.rsms.v1.Position)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool position_valid = 1;
  if (this->position_valid() != 0) {
    total_size += 1 + 1;
  }

  // bool south_latitude = 2;
  if (this->south_latitude() != 0) {
    total_size += 1 + 1;
  }

  // bool west_longitude = 3;
  if (this->west_longitude() != 0) {
    total_size += 1 + 1;
  }

  // uint32 longitude = 4;
  if (this->longitude() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_longitude());
  }

  // uint32 latitude = 5;
  if (this->latitude() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_latitude());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Position::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tbox.mcu.rsms.v1.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const Position* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Position>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tbox.mcu.rsms.v1.Position)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tbox.mcu.rsms.v1.Position)
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tbox.mcu.rsms.v1.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.position_valid() != 0) {
    _internal_set_position_valid(from._internal_position_valid());
  }
  if (from.south_latitude() != 0) {
    _internal_set_south_latitude(from._internal_south_latitude());
  }
  if (from.west_longitude() != 0) {
    _internal_set_west_longitude(from._internal_west_longitude());
  }
  if (from.longitude() != 0) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (from.latitude() != 0) {
    _internal_set_latitude(from._internal_latitude());
  }
}

void Position::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tbox.mcu.rsms.v1.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tbox.mcu.rsms.v1.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position, latitude_)
      + sizeof(Position::latitude_)
      - PROTOBUF_FIELD_OFFSET(Position, position_valid_)>(
          reinterpret_cast<char*>(&position_valid_),
          reinterpret_cast<char*>(&other->position_valid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Position::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Extremum::InitAsDefaultInstance() {
}
class Extremum::_Internal {
 public:
};

Extremum::Extremum(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tbox.mcu.rsms.v1.Extremum)
}
Extremum::Extremum(const Extremum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_voltage_battery_device_no_, &from.max_voltage_battery_device_no_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_temperature_) -
    reinterpret_cast<char*>(&max_voltage_battery_device_no_)) + sizeof(min_temperature_));
  // @@protoc_insertion_point(copy_constructor:tbox.mcu.rsms.v1.Extremum)
}

void Extremum::SharedCtor() {
  ::memset(&max_voltage_battery_device_no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_temperature_) -
      reinterpret_cast<char*>(&max_voltage_battery_device_no_)) + sizeof(min_temperature_));
}

Extremum::~Extremum() {
  // @@protoc_insertion_point(destructor:tbox.mcu.rsms.v1.Extremum)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Extremum::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Extremum::ArenaDtor(void* object) {
  Extremum* _this = reinterpret_cast< Extremum* >(object);
  (void)_this;
}
void Extremum::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Extremum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Extremum& Extremum::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Extremum_rsms_5fdata_5fv1_2eproto.base);
  return *internal_default_instance();
}


void Extremum::Clear() {
// @@protoc_insertion_point(message_clear_start:tbox.mcu.rsms.v1.Extremum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_voltage_battery_device_no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_temperature_) -
      reinterpret_cast<char*>(&max_voltage_battery_device_no_)) + sizeof(min_temperature_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Extremum::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 max_voltage_battery_device_no = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_voltage_battery_device_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_voltage_cell_no = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_voltage_cell_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cell_max_voltage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cell_max_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 min_voltage_battery_device_no = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          min_voltage_battery_device_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 min_voltage_cell_no = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          min_voltage_cell_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cell_min_voltage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          cell_min_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_temperature_device_no = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          max_temperature_device_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_temperature_probe_no = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          max_temperature_probe_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_temperature = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          max_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 min_temperature_device_no = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          min_temperature_device_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 min_temperature_probe_no = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          min_temperature_probe_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 min_temperature = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          min_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Extremum::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.mcu.rsms.v1.Extremum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 max_voltage_battery_device_no = 1;
  if (this->max_voltage_battery_device_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_max_voltage_battery_device_no(), target);
  }

  // uint32 max_voltage_cell_no = 2;
  if (this->max_voltage_cell_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max_voltage_cell_no(), target);
  }

  // uint32 cell_max_voltage = 3;
  if (this->cell_max_voltage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_cell_max_voltage(), target);
  }

  // uint32 min_voltage_battery_device_no = 4;
  if (this->min_voltage_battery_device_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_min_voltage_battery_device_no(), target);
  }

  // uint32 min_voltage_cell_no = 5;
  if (this->min_voltage_cell_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_min_voltage_cell_no(), target);
  }

  // uint32 cell_min_voltage = 6;
  if (this->cell_min_voltage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_cell_min_voltage(), target);
  }

  // uint32 max_temperature_device_no = 7;
  if (this->max_temperature_device_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_max_temperature_device_no(), target);
  }

  // uint32 max_temperature_probe_no = 8;
  if (this->max_temperature_probe_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_max_temperature_probe_no(), target);
  }

  // uint32 max_temperature = 9;
  if (this->max_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_max_temperature(), target);
  }

  // uint32 min_temperature_device_no = 10;
  if (this->min_temperature_device_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_min_temperature_device_no(), target);
  }

  // uint32 min_temperature_probe_no = 11;
  if (this->min_temperature_probe_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_min_temperature_probe_no(), target);
  }

  // uint32 min_temperature = 12;
  if (this->min_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_min_temperature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.mcu.rsms.v1.Extremum)
  return target;
}

size_t Extremum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tbox.mcu.rsms.v1.Extremum)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 max_voltage_battery_device_no = 1;
  if (this->max_voltage_battery_device_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_voltage_battery_device_no());
  }

  // uint32 max_voltage_cell_no = 2;
  if (this->max_voltage_cell_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_voltage_cell_no());
  }

  // uint32 cell_max_voltage = 3;
  if (this->cell_max_voltage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cell_max_voltage());
  }

  // uint32 min_voltage_battery_device_no = 4;
  if (this->min_voltage_battery_device_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_min_voltage_battery_device_no());
  }

  // uint32 min_voltage_cell_no = 5;
  if (this->min_voltage_cell_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_min_voltage_cell_no());
  }

  // uint32 cell_min_voltage = 6;
  if (this->cell_min_voltage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cell_min_voltage());
  }

  // uint32 max_temperature_device_no = 7;
  if (this->max_temperature_device_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_temperature_device_no());
  }

  // uint32 max_temperature_probe_no = 8;
  if (this->max_temperature_probe_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_temperature_probe_no());
  }

  // uint32 max_temperature = 9;
  if (this->max_temperature() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_temperature());
  }

  // uint32 min_temperature_device_no = 10;
  if (this->min_temperature_device_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_min_temperature_device_no());
  }

  // uint32 min_temperature_probe_no = 11;
  if (this->min_temperature_probe_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_min_temperature_probe_no());
  }

  // uint32 min_temperature = 12;
  if (this->min_temperature() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_min_temperature());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Extremum::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tbox.mcu.rsms.v1.Extremum)
  GOOGLE_DCHECK_NE(&from, this);
  const Extremum* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Extremum>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tbox.mcu.rsms.v1.Extremum)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tbox.mcu.rsms.v1.Extremum)
    MergeFrom(*source);
  }
}

void Extremum::MergeFrom(const Extremum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tbox.mcu.rsms.v1.Extremum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_voltage_battery_device_no() != 0) {
    _internal_set_max_voltage_battery_device_no(from._internal_max_voltage_battery_device_no());
  }
  if (from.max_voltage_cell_no() != 0) {
    _internal_set_max_voltage_cell_no(from._internal_max_voltage_cell_no());
  }
  if (from.cell_max_voltage() != 0) {
    _internal_set_cell_max_voltage(from._internal_cell_max_voltage());
  }
  if (from.min_voltage_battery_device_no() != 0) {
    _internal_set_min_voltage_battery_device_no(from._internal_min_voltage_battery_device_no());
  }
  if (from.min_voltage_cell_no() != 0) {
    _internal_set_min_voltage_cell_no(from._internal_min_voltage_cell_no());
  }
  if (from.cell_min_voltage() != 0) {
    _internal_set_cell_min_voltage(from._internal_cell_min_voltage());
  }
  if (from.max_temperature_device_no() != 0) {
    _internal_set_max_temperature_device_no(from._internal_max_temperature_device_no());
  }
  if (from.max_temperature_probe_no() != 0) {
    _internal_set_max_temperature_probe_no(from._internal_max_temperature_probe_no());
  }
  if (from.max_temperature() != 0) {
    _internal_set_max_temperature(from._internal_max_temperature());
  }
  if (from.min_temperature_device_no() != 0) {
    _internal_set_min_temperature_device_no(from._internal_min_temperature_device_no());
  }
  if (from.min_temperature_probe_no() != 0) {
    _internal_set_min_temperature_probe_no(from._internal_min_temperature_probe_no());
  }
  if (from.min_temperature() != 0) {
    _internal_set_min_temperature(from._internal_min_temperature());
  }
}

void Extremum::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tbox.mcu.rsms.v1.Extremum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Extremum::CopyFrom(const Extremum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tbox.mcu.rsms.v1.Extremum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extremum::IsInitialized() const {
  return true;
}

void Extremum::InternalSwap(Extremum* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Extremum, min_temperature_)
      + sizeof(Extremum::min_temperature_)
      - PROTOBUF_FIELD_OFFSET(Extremum, max_voltage_battery_device_no_)>(
          reinterpret_cast<char*>(&max_voltage_battery_device_no_),
          reinterpret_cast<char*>(&other->max_voltage_battery_device_no_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Extremum::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Alarm::InitAsDefaultInstance() {
}
class Alarm::_Internal {
 public:
};

Alarm::Alarm(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  battery_fault_list_(arena),
  drive_motor_fault_list_(arena),
  engine_fault_list_(arena),
  other_fault_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tbox.mcu.rsms.v1.Alarm)
}
Alarm::Alarm(const Alarm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      battery_fault_list_(from.battery_fault_list_),
      drive_motor_fault_list_(from.drive_motor_fault_list_),
      engine_fault_list_(from.engine_fault_list_),
      other_fault_list_(from.other_fault_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_alarm_level_, &from.max_alarm_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&other_fault_count_) -
    reinterpret_cast<char*>(&max_alarm_level_)) + sizeof(other_fault_count_));
  // @@protoc_insertion_point(copy_constructor:tbox.mcu.rsms.v1.Alarm)
}

void Alarm::SharedCtor() {
  ::memset(&max_alarm_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&other_fault_count_) -
      reinterpret_cast<char*>(&max_alarm_level_)) + sizeof(other_fault_count_));
}

Alarm::~Alarm() {
  // @@protoc_insertion_point(destructor:tbox.mcu.rsms.v1.Alarm)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Alarm::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Alarm::ArenaDtor(void* object) {
  Alarm* _this = reinterpret_cast< Alarm* >(object);
  (void)_this;
}
void Alarm::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Alarm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Alarm& Alarm::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Alarm_rsms_5fdata_5fv1_2eproto.base);
  return *internal_default_instance();
}


void Alarm::Clear() {
// @@protoc_insertion_point(message_clear_start:tbox.mcu.rsms.v1.Alarm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  battery_fault_list_.Clear();
  drive_motor_fault_list_.Clear();
  engine_fault_list_.Clear();
  other_fault_list_.Clear();
  ::memset(&max_alarm_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&other_fault_count_) -
      reinterpret_cast<char*>(&max_alarm_level_)) + sizeof(other_fault_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Alarm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 max_alarm_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_alarm_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 alarm_flag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          alarm_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 battery_fault_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          battery_fault_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 battery_fault_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_battery_fault_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_battery_fault_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 drive_motor_fault_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          drive_motor_fault_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 drive_motor_fault_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_drive_motor_fault_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_drive_motor_fault_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 engine_fault_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          engine_fault_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 engine_fault_list = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_engine_fault_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_engine_fault_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 other_fault_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          other_fault_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 other_fault_list = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_other_fault_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80) {
          _internal_add_other_fault_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Alarm::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.mcu.rsms.v1.Alarm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 max_alarm_level = 1;
  if (this->max_alarm_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_max_alarm_level(), target);
  }

  // uint32 alarm_flag = 2;
  if (this->alarm_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_alarm_flag(), target);
  }

  // uint32 battery_fault_count = 3;
  if (this->battery_fault_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_battery_fault_count(), target);
  }

  // repeated uint32 battery_fault_list = 4;
  {
    int byte_size = _battery_fault_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_battery_fault_list(), byte_size, target);
    }
  }

  // uint32 drive_motor_fault_count = 5;
  if (this->drive_motor_fault_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_drive_motor_fault_count(), target);
  }

  // repeated uint32 drive_motor_fault_list = 6;
  {
    int byte_size = _drive_motor_fault_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_drive_motor_fault_list(), byte_size, target);
    }
  }

  // uint32 engine_fault_count = 7;
  if (this->engine_fault_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_engine_fault_count(), target);
  }

  // repeated uint32 engine_fault_list = 8;
  {
    int byte_size = _engine_fault_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          8, _internal_engine_fault_list(), byte_size, target);
    }
  }

  // uint32 other_fault_count = 9;
  if (this->other_fault_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_other_fault_count(), target);
  }

  // repeated uint32 other_fault_list = 10;
  {
    int byte_size = _other_fault_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          10, _internal_other_fault_list(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.mcu.rsms.v1.Alarm)
  return target;
}

size_t Alarm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tbox.mcu.rsms.v1.Alarm)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 battery_fault_list = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->battery_fault_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _battery_fault_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 drive_motor_fault_list = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->drive_motor_fault_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _drive_motor_fault_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 engine_fault_list = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->engine_fault_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _engine_fault_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 other_fault_list = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->other_fault_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _other_fault_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 max_alarm_level = 1;
  if (this->max_alarm_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_alarm_level());
  }

  // uint32 alarm_flag = 2;
  if (this->alarm_flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_alarm_flag());
  }

  // uint32 battery_fault_count = 3;
  if (this->battery_fault_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_battery_fault_count());
  }

  // uint32 drive_motor_fault_count = 5;
  if (this->drive_motor_fault_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_drive_motor_fault_count());
  }

  // uint32 engine_fault_count = 7;
  if (this->engine_fault_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_engine_fault_count());
  }

  // uint32 other_fault_count = 9;
  if (this->other_fault_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_other_fault_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Alarm::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tbox.mcu.rsms.v1.Alarm)
  GOOGLE_DCHECK_NE(&from, this);
  const Alarm* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Alarm>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tbox.mcu.rsms.v1.Alarm)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tbox.mcu.rsms.v1.Alarm)
    MergeFrom(*source);
  }
}

void Alarm::MergeFrom(const Alarm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tbox.mcu.rsms.v1.Alarm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  battery_fault_list_.MergeFrom(from.battery_fault_list_);
  drive_motor_fault_list_.MergeFrom(from.drive_motor_fault_list_);
  engine_fault_list_.MergeFrom(from.engine_fault_list_);
  other_fault_list_.MergeFrom(from.other_fault_list_);
  if (from.max_alarm_level() != 0) {
    _internal_set_max_alarm_level(from._internal_max_alarm_level());
  }
  if (from.alarm_flag() != 0) {
    _internal_set_alarm_flag(from._internal_alarm_flag());
  }
  if (from.battery_fault_count() != 0) {
    _internal_set_battery_fault_count(from._internal_battery_fault_count());
  }
  if (from.drive_motor_fault_count() != 0) {
    _internal_set_drive_motor_fault_count(from._internal_drive_motor_fault_count());
  }
  if (from.engine_fault_count() != 0) {
    _internal_set_engine_fault_count(from._internal_engine_fault_count());
  }
  if (from.other_fault_count() != 0) {
    _internal_set_other_fault_count(from._internal_other_fault_count());
  }
}

void Alarm::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tbox.mcu.rsms.v1.Alarm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Alarm::CopyFrom(const Alarm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tbox.mcu.rsms.v1.Alarm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Alarm::IsInitialized() const {
  return true;
}

void Alarm::InternalSwap(Alarm* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  battery_fault_list_.InternalSwap(&other->battery_fault_list_);
  drive_motor_fault_list_.InternalSwap(&other->drive_motor_fault_list_);
  engine_fault_list_.InternalSwap(&other->engine_fault_list_);
  other_fault_list_.InternalSwap(&other->other_fault_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Alarm, other_fault_count_)
      + sizeof(Alarm::other_fault_count_)
      - PROTOBUF_FIELD_OFFSET(Alarm, max_alarm_level_)>(
          reinterpret_cast<char*>(&max_alarm_level_),
          reinterpret_cast<char*>(&other->max_alarm_level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Alarm::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BatteryVoltage::InitAsDefaultInstance() {
}
class BatteryVoltage::_Internal {
 public:
};

BatteryVoltage::BatteryVoltage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  battery_voltage_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tbox.mcu.rsms.v1.BatteryVoltage)
}
BatteryVoltage::BatteryVoltage(const BatteryVoltage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      battery_voltage_list_(from.battery_voltage_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  battery_count_ = from.battery_count_;
  // @@protoc_insertion_point(copy_constructor:tbox.mcu.rsms.v1.BatteryVoltage)
}

void BatteryVoltage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BatteryVoltage_rsms_5fdata_5fv1_2eproto.base);
  battery_count_ = 0u;
}

BatteryVoltage::~BatteryVoltage() {
  // @@protoc_insertion_point(destructor:tbox.mcu.rsms.v1.BatteryVoltage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BatteryVoltage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BatteryVoltage::ArenaDtor(void* object) {
  BatteryVoltage* _this = reinterpret_cast< BatteryVoltage* >(object);
  (void)_this;
}
void BatteryVoltage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatteryVoltage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatteryVoltage& BatteryVoltage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BatteryVoltage_rsms_5fdata_5fv1_2eproto.base);
  return *internal_default_instance();
}


void BatteryVoltage::Clear() {
// @@protoc_insertion_point(message_clear_start:tbox.mcu.rsms.v1.BatteryVoltage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  battery_voltage_list_.Clear();
  battery_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatteryVoltage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 battery_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          battery_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tbox.mcu.rsms.v1.SingleBatteryVoltage battery_voltage_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_battery_voltage_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatteryVoltage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.mcu.rsms.v1.BatteryVoltage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 battery_count = 1;
  if (this->battery_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_battery_count(), target);
  }

  // repeated .tbox.mcu.rsms.v1.SingleBatteryVoltage battery_voltage_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_battery_voltage_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_battery_voltage_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.mcu.rsms.v1.BatteryVoltage)
  return target;
}

size_t BatteryVoltage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tbox.mcu.rsms.v1.BatteryVoltage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tbox.mcu.rsms.v1.SingleBatteryVoltage battery_voltage_list = 2;
  total_size += 1UL * this->_internal_battery_voltage_list_size();
  for (const auto& msg : this->battery_voltage_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 battery_count = 1;
  if (this->battery_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_battery_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatteryVoltage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tbox.mcu.rsms.v1.BatteryVoltage)
  GOOGLE_DCHECK_NE(&from, this);
  const BatteryVoltage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatteryVoltage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tbox.mcu.rsms.v1.BatteryVoltage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tbox.mcu.rsms.v1.BatteryVoltage)
    MergeFrom(*source);
  }
}

void BatteryVoltage::MergeFrom(const BatteryVoltage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tbox.mcu.rsms.v1.BatteryVoltage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  battery_voltage_list_.MergeFrom(from.battery_voltage_list_);
  if (from.battery_count() != 0) {
    _internal_set_battery_count(from._internal_battery_count());
  }
}

void BatteryVoltage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tbox.mcu.rsms.v1.BatteryVoltage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatteryVoltage::CopyFrom(const BatteryVoltage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tbox.mcu.rsms.v1.BatteryVoltage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatteryVoltage::IsInitialized() const {
  return true;
}

void BatteryVoltage::InternalSwap(BatteryVoltage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  battery_voltage_list_.InternalSwap(&other->battery_voltage_list_);
  swap(battery_count_, other->battery_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatteryVoltage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleBatteryVoltage::InitAsDefaultInstance() {
}
class SingleBatteryVoltage::_Internal {
 public:
};

SingleBatteryVoltage::SingleBatteryVoltage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cell_voltage_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tbox.mcu.rsms.v1.SingleBatteryVoltage)
}
SingleBatteryVoltage::SingleBatteryVoltage(const SingleBatteryVoltage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cell_voltage_list_(from.cell_voltage_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sn_, &from.sn_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_cell_count_) -
    reinterpret_cast<char*>(&sn_)) + sizeof(frame_cell_count_));
  // @@protoc_insertion_point(copy_constructor:tbox.mcu.rsms.v1.SingleBatteryVoltage)
}

void SingleBatteryVoltage::SharedCtor() {
  ::memset(&sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_cell_count_) -
      reinterpret_cast<char*>(&sn_)) + sizeof(frame_cell_count_));
}

SingleBatteryVoltage::~SingleBatteryVoltage() {
  // @@protoc_insertion_point(destructor:tbox.mcu.rsms.v1.SingleBatteryVoltage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SingleBatteryVoltage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SingleBatteryVoltage::ArenaDtor(void* object) {
  SingleBatteryVoltage* _this = reinterpret_cast< SingleBatteryVoltage* >(object);
  (void)_this;
}
void SingleBatteryVoltage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleBatteryVoltage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleBatteryVoltage& SingleBatteryVoltage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleBatteryVoltage_rsms_5fdata_5fv1_2eproto.base);
  return *internal_default_instance();
}


void SingleBatteryVoltage::Clear() {
// @@protoc_insertion_point(message_clear_start:tbox.mcu.rsms.v1.SingleBatteryVoltage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cell_voltage_list_.Clear();
  ::memset(&sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_cell_count_) -
      reinterpret_cast<char*>(&sn_)) + sizeof(frame_cell_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleBatteryVoltage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 voltage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 current = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cell_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          cell_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 frame_start_cell_sn = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          frame_start_cell_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 frame_cell_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          frame_cell_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 cell_voltage_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_cell_voltage_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_cell_voltage_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleBatteryVoltage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.mcu.rsms.v1.SingleBatteryVoltage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sn = 1;
  if (this->sn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sn(), target);
  }

  // uint32 voltage = 2;
  if (this->voltage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_voltage(), target);
  }

  // uint32 current = 3;
  if (this->current() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_current(), target);
  }

  // uint32 cell_count = 4;
  if (this->cell_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_cell_count(), target);
  }

  // uint32 frame_start_cell_sn = 5;
  if (this->frame_start_cell_sn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_frame_start_cell_sn(), target);
  }

  // uint32 frame_cell_count = 6;
  if (this->frame_cell_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_frame_cell_count(), target);
  }

  // repeated uint32 cell_voltage_list = 7;
  {
    int byte_size = _cell_voltage_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          7, _internal_cell_voltage_list(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.mcu.rsms.v1.SingleBatteryVoltage)
  return target;
}

size_t SingleBatteryVoltage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tbox.mcu.rsms.v1.SingleBatteryVoltage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 cell_voltage_list = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->cell_voltage_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _cell_voltage_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 sn = 1;
  if (this->sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sn());
  }

  // uint32 voltage = 2;
  if (this->voltage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_voltage());
  }

  // uint32 current = 3;
  if (this->current() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_current());
  }

  // uint32 cell_count = 4;
  if (this->cell_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cell_count());
  }

  // uint32 frame_start_cell_sn = 5;
  if (this->frame_start_cell_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frame_start_cell_sn());
  }

  // uint32 frame_cell_count = 6;
  if (this->frame_cell_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frame_cell_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleBatteryVoltage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tbox.mcu.rsms.v1.SingleBatteryVoltage)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleBatteryVoltage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleBatteryVoltage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tbox.mcu.rsms.v1.SingleBatteryVoltage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tbox.mcu.rsms.v1.SingleBatteryVoltage)
    MergeFrom(*source);
  }
}

void SingleBatteryVoltage::MergeFrom(const SingleBatteryVoltage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tbox.mcu.rsms.v1.SingleBatteryVoltage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cell_voltage_list_.MergeFrom(from.cell_voltage_list_);
  if (from.sn() != 0) {
    _internal_set_sn(from._internal_sn());
  }
  if (from.voltage() != 0) {
    _internal_set_voltage(from._internal_voltage());
  }
  if (from.current() != 0) {
    _internal_set_current(from._internal_current());
  }
  if (from.cell_count() != 0) {
    _internal_set_cell_count(from._internal_cell_count());
  }
  if (from.frame_start_cell_sn() != 0) {
    _internal_set_frame_start_cell_sn(from._internal_frame_start_cell_sn());
  }
  if (from.frame_cell_count() != 0) {
    _internal_set_frame_cell_count(from._internal_frame_cell_count());
  }
}

void SingleBatteryVoltage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tbox.mcu.rsms.v1.SingleBatteryVoltage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleBatteryVoltage::CopyFrom(const SingleBatteryVoltage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tbox.mcu.rsms.v1.SingleBatteryVoltage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleBatteryVoltage::IsInitialized() const {
  return true;
}

void SingleBatteryVoltage::InternalSwap(SingleBatteryVoltage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cell_voltage_list_.InternalSwap(&other->cell_voltage_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleBatteryVoltage, frame_cell_count_)
      + sizeof(SingleBatteryVoltage::frame_cell_count_)
      - PROTOBUF_FIELD_OFFSET(SingleBatteryVoltage, sn_)>(
          reinterpret_cast<char*>(&sn_),
          reinterpret_cast<char*>(&other->sn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleBatteryVoltage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BatteryTemperature::InitAsDefaultInstance() {
}
class BatteryTemperature::_Internal {
 public:
};

BatteryTemperature::BatteryTemperature(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  battery_temperature_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tbox.mcu.rsms.v1.BatteryTemperature)
}
BatteryTemperature::BatteryTemperature(const BatteryTemperature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      battery_temperature_list_(from.battery_temperature_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  battery_count_ = from.battery_count_;
  // @@protoc_insertion_point(copy_constructor:tbox.mcu.rsms.v1.BatteryTemperature)
}

void BatteryTemperature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BatteryTemperature_rsms_5fdata_5fv1_2eproto.base);
  battery_count_ = 0u;
}

BatteryTemperature::~BatteryTemperature() {
  // @@protoc_insertion_point(destructor:tbox.mcu.rsms.v1.BatteryTemperature)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BatteryTemperature::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BatteryTemperature::ArenaDtor(void* object) {
  BatteryTemperature* _this = reinterpret_cast< BatteryTemperature* >(object);
  (void)_this;
}
void BatteryTemperature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatteryTemperature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatteryTemperature& BatteryTemperature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BatteryTemperature_rsms_5fdata_5fv1_2eproto.base);
  return *internal_default_instance();
}


void BatteryTemperature::Clear() {
// @@protoc_insertion_point(message_clear_start:tbox.mcu.rsms.v1.BatteryTemperature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  battery_temperature_list_.Clear();
  battery_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatteryTemperature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 battery_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          battery_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tbox.mcu.rsms.v1.SingleBatteryTemperature battery_temperature_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_battery_temperature_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatteryTemperature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.mcu.rsms.v1.BatteryTemperature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 battery_count = 1;
  if (this->battery_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_battery_count(), target);
  }

  // repeated .tbox.mcu.rsms.v1.SingleBatteryTemperature battery_temperature_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_battery_temperature_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_battery_temperature_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.mcu.rsms.v1.BatteryTemperature)
  return target;
}

size_t BatteryTemperature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tbox.mcu.rsms.v1.BatteryTemperature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tbox.mcu.rsms.v1.SingleBatteryTemperature battery_temperature_list = 2;
  total_size += 1UL * this->_internal_battery_temperature_list_size();
  for (const auto& msg : this->battery_temperature_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 battery_count = 1;
  if (this->battery_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_battery_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatteryTemperature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tbox.mcu.rsms.v1.BatteryTemperature)
  GOOGLE_DCHECK_NE(&from, this);
  const BatteryTemperature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatteryTemperature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tbox.mcu.rsms.v1.BatteryTemperature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tbox.mcu.rsms.v1.BatteryTemperature)
    MergeFrom(*source);
  }
}

void BatteryTemperature::MergeFrom(const BatteryTemperature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tbox.mcu.rsms.v1.BatteryTemperature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  battery_temperature_list_.MergeFrom(from.battery_temperature_list_);
  if (from.battery_count() != 0) {
    _internal_set_battery_count(from._internal_battery_count());
  }
}

void BatteryTemperature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tbox.mcu.rsms.v1.BatteryTemperature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatteryTemperature::CopyFrom(const BatteryTemperature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tbox.mcu.rsms.v1.BatteryTemperature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatteryTemperature::IsInitialized() const {
  return true;
}

void BatteryTemperature::InternalSwap(BatteryTemperature* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  battery_temperature_list_.InternalSwap(&other->battery_temperature_list_);
  swap(battery_count_, other->battery_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatteryTemperature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleBatteryTemperature::InitAsDefaultInstance() {
}
class SingleBatteryTemperature::_Internal {
 public:
};

SingleBatteryTemperature::SingleBatteryTemperature(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  temperatures_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tbox.mcu.rsms.v1.SingleBatteryTemperature)
}
SingleBatteryTemperature::SingleBatteryTemperature(const SingleBatteryTemperature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      temperatures_(from.temperatures_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sn_, &from.sn_,
    static_cast<size_t>(reinterpret_cast<char*>(&probe_count_) -
    reinterpret_cast<char*>(&sn_)) + sizeof(probe_count_));
  // @@protoc_insertion_point(copy_constructor:tbox.mcu.rsms.v1.SingleBatteryTemperature)
}

void SingleBatteryTemperature::SharedCtor() {
  ::memset(&sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&probe_count_) -
      reinterpret_cast<char*>(&sn_)) + sizeof(probe_count_));
}

SingleBatteryTemperature::~SingleBatteryTemperature() {
  // @@protoc_insertion_point(destructor:tbox.mcu.rsms.v1.SingleBatteryTemperature)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SingleBatteryTemperature::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SingleBatteryTemperature::ArenaDtor(void* object) {
  SingleBatteryTemperature* _this = reinterpret_cast< SingleBatteryTemperature* >(object);
  (void)_this;
}
void SingleBatteryTemperature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleBatteryTemperature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleBatteryTemperature& SingleBatteryTemperature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleBatteryTemperature_rsms_5fdata_5fv1_2eproto.base);
  return *internal_default_instance();
}


void SingleBatteryTemperature::Clear() {
// @@protoc_insertion_point(message_clear_start:tbox.mcu.rsms.v1.SingleBatteryTemperature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  temperatures_.Clear();
  ::memset(&sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&probe_count_) -
      reinterpret_cast<char*>(&sn_)) + sizeof(probe_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleBatteryTemperature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 probe_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          probe_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 temperatures = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_temperatures(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_temperatures(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleBatteryTemperature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.mcu.rsms.v1.SingleBatteryTemperature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sn = 1;
  if (this->sn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sn(), target);
  }

  // uint32 probe_count = 2;
  if (this->probe_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_probe_count(), target);
  }

  // repeated uint32 temperatures = 3;
  {
    int byte_size = _temperatures_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_temperatures(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.mcu.rsms.v1.SingleBatteryTemperature)
  return target;
}

size_t SingleBatteryTemperature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tbox.mcu.rsms.v1.SingleBatteryTemperature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 temperatures = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->temperatures_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _temperatures_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 sn = 1;
  if (this->sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sn());
  }

  // uint32 probe_count = 2;
  if (this->probe_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_probe_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleBatteryTemperature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tbox.mcu.rsms.v1.SingleBatteryTemperature)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleBatteryTemperature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleBatteryTemperature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tbox.mcu.rsms.v1.SingleBatteryTemperature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tbox.mcu.rsms.v1.SingleBatteryTemperature)
    MergeFrom(*source);
  }
}

void SingleBatteryTemperature::MergeFrom(const SingleBatteryTemperature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tbox.mcu.rsms.v1.SingleBatteryTemperature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  temperatures_.MergeFrom(from.temperatures_);
  if (from.sn() != 0) {
    _internal_set_sn(from._internal_sn());
  }
  if (from.probe_count() != 0) {
    _internal_set_probe_count(from._internal_probe_count());
  }
}

void SingleBatteryTemperature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tbox.mcu.rsms.v1.SingleBatteryTemperature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleBatteryTemperature::CopyFrom(const SingleBatteryTemperature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tbox.mcu.rsms.v1.SingleBatteryTemperature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleBatteryTemperature::IsInitialized() const {
  return true;
}

void SingleBatteryTemperature::InternalSwap(SingleBatteryTemperature* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  temperatures_.InternalSwap(&other->temperatures_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleBatteryTemperature, probe_count_)
      + sizeof(SingleBatteryTemperature::probe_count_)
      - PROTOBUF_FIELD_OFFSET(SingleBatteryTemperature, sn_)>(
          reinterpret_cast<char*>(&sn_),
          reinterpret_cast<char*>(&other->sn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleBatteryTemperature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RsmsData::InitAsDefaultInstance() {
  ::tbox::mcu::rsms::v1::_RsmsData_default_instance_._instance.get_mutable()->vehicle_data_ = const_cast< ::tbox::mcu::rsms::v1::VehicleData*>(
      ::tbox::mcu::rsms::v1::VehicleData::internal_default_instance());
  ::tbox::mcu::rsms::v1::_RsmsData_default_instance_._instance.get_mutable()->drive_motor_ = const_cast< ::tbox::mcu::rsms::v1::DriveMotor*>(
      ::tbox::mcu::rsms::v1::DriveMotor::internal_default_instance());
  ::tbox::mcu::rsms::v1::_RsmsData_default_instance_._instance.get_mutable()->position_ = const_cast< ::tbox::mcu::rsms::v1::Position*>(
      ::tbox::mcu::rsms::v1::Position::internal_default_instance());
  ::tbox::mcu::rsms::v1::_RsmsData_default_instance_._instance.get_mutable()->extremum_ = const_cast< ::tbox::mcu::rsms::v1::Extremum*>(
      ::tbox::mcu::rsms::v1::Extremum::internal_default_instance());
  ::tbox::mcu::rsms::v1::_RsmsData_default_instance_._instance.get_mutable()->alarm_ = const_cast< ::tbox::mcu::rsms::v1::Alarm*>(
      ::tbox::mcu::rsms::v1::Alarm::internal_default_instance());
  ::tbox::mcu::rsms::v1::_RsmsData_default_instance_._instance.get_mutable()->battery_voltage_ = const_cast< ::tbox::mcu::rsms::v1::BatteryVoltage*>(
      ::tbox::mcu::rsms::v1::BatteryVoltage::internal_default_instance());
  ::tbox::mcu::rsms::v1::_RsmsData_default_instance_._instance.get_mutable()->battery_temperature_ = const_cast< ::tbox::mcu::rsms::v1::BatteryTemperature*>(
      ::tbox::mcu::rsms::v1::BatteryTemperature::internal_default_instance());
}
class RsmsData::_Internal {
 public:
  static const ::tbox::mcu::rsms::v1::VehicleData& vehicle_data(const RsmsData* msg);
  static const ::tbox::mcu::rsms::v1::DriveMotor& drive_motor(const RsmsData* msg);
  static const ::tbox::mcu::rsms::v1::Position& position(const RsmsData* msg);
  static const ::tbox::mcu::rsms::v1::Extremum& extremum(const RsmsData* msg);
  static const ::tbox::mcu::rsms::v1::Alarm& alarm(const RsmsData* msg);
  static const ::tbox::mcu::rsms::v1::BatteryVoltage& battery_voltage(const RsmsData* msg);
  static const ::tbox::mcu::rsms::v1::BatteryTemperature& battery_temperature(const RsmsData* msg);
};

const ::tbox::mcu::rsms::v1::VehicleData&
RsmsData::_Internal::vehicle_data(const RsmsData* msg) {
  return *msg->vehicle_data_;
}
const ::tbox::mcu::rsms::v1::DriveMotor&
RsmsData::_Internal::drive_motor(const RsmsData* msg) {
  return *msg->drive_motor_;
}
const ::tbox::mcu::rsms::v1::Position&
RsmsData::_Internal::position(const RsmsData* msg) {
  return *msg->position_;
}
const ::tbox::mcu::rsms::v1::Extremum&
RsmsData::_Internal::extremum(const RsmsData* msg) {
  return *msg->extremum_;
}
const ::tbox::mcu::rsms::v1::Alarm&
RsmsData::_Internal::alarm(const RsmsData* msg) {
  return *msg->alarm_;
}
const ::tbox::mcu::rsms::v1::BatteryVoltage&
RsmsData::_Internal::battery_voltage(const RsmsData* msg) {
  return *msg->battery_voltage_;
}
const ::tbox::mcu::rsms::v1::BatteryTemperature&
RsmsData::_Internal::battery_temperature(const RsmsData* msg) {
  return *msg->battery_temperature_;
}
RsmsData::RsmsData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tbox.mcu.rsms.v1.RsmsData)
}
RsmsData::RsmsData(const RsmsData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vehicle_data()) {
    vehicle_data_ = new ::tbox::mcu::rsms::v1::VehicleData(*from.vehicle_data_);
  } else {
    vehicle_data_ = nullptr;
  }
  if (from._internal_has_drive_motor()) {
    drive_motor_ = new ::tbox::mcu::rsms::v1::DriveMotor(*from.drive_motor_);
  } else {
    drive_motor_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::tbox::mcu::rsms::v1::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_extremum()) {
    extremum_ = new ::tbox::mcu::rsms::v1::Extremum(*from.extremum_);
  } else {
    extremum_ = nullptr;
  }
  if (from._internal_has_alarm()) {
    alarm_ = new ::tbox::mcu::rsms::v1::Alarm(*from.alarm_);
  } else {
    alarm_ = nullptr;
  }
  if (from._internal_has_battery_voltage()) {
    battery_voltage_ = new ::tbox::mcu::rsms::v1::BatteryVoltage(*from.battery_voltage_);
  } else {
    battery_voltage_ = nullptr;
  }
  if (from._internal_has_battery_temperature()) {
    battery_temperature_ = new ::tbox::mcu::rsms::v1::BatteryTemperature(*from.battery_temperature_);
  } else {
    battery_temperature_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tbox.mcu.rsms.v1.RsmsData)
}

void RsmsData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RsmsData_rsms_5fdata_5fv1_2eproto.base);
  ::memset(&vehicle_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&battery_temperature_) -
      reinterpret_cast<char*>(&vehicle_data_)) + sizeof(battery_temperature_));
}

RsmsData::~RsmsData() {
  // @@protoc_insertion_point(destructor:tbox.mcu.rsms.v1.RsmsData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RsmsData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete vehicle_data_;
  if (this != internal_default_instance()) delete drive_motor_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete extremum_;
  if (this != internal_default_instance()) delete alarm_;
  if (this != internal_default_instance()) delete battery_voltage_;
  if (this != internal_default_instance()) delete battery_temperature_;
}

void RsmsData::ArenaDtor(void* object) {
  RsmsData* _this = reinterpret_cast< RsmsData* >(object);
  (void)_this;
}
void RsmsData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RsmsData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RsmsData& RsmsData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RsmsData_rsms_5fdata_5fv1_2eproto.base);
  return *internal_default_instance();
}


void RsmsData::Clear() {
// @@protoc_insertion_point(message_clear_start:tbox.mcu.rsms.v1.RsmsData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && vehicle_data_ != nullptr) {
    delete vehicle_data_;
  }
  vehicle_data_ = nullptr;
  if (GetArena() == nullptr && drive_motor_ != nullptr) {
    delete drive_motor_;
  }
  drive_motor_ = nullptr;
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArena() == nullptr && extremum_ != nullptr) {
    delete extremum_;
  }
  extremum_ = nullptr;
  if (GetArena() == nullptr && alarm_ != nullptr) {
    delete alarm_;
  }
  alarm_ = nullptr;
  if (GetArena() == nullptr && battery_voltage_ != nullptr) {
    delete battery_voltage_;
  }
  battery_voltage_ = nullptr;
  if (GetArena() == nullptr && battery_temperature_ != nullptr) {
    delete battery_temperature_;
  }
  battery_temperature_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RsmsData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tbox.mcu.rsms.v1.VehicleData vehicle_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tbox.mcu.rsms.v1.DriveMotor drive_motor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_drive_motor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tbox.mcu.rsms.v1.Position position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tbox.mcu.rsms.v1.Extremum extremum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_extremum(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tbox.mcu.rsms.v1.Alarm alarm = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_alarm(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tbox.mcu.rsms.v1.BatteryVoltage battery_voltage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_battery_voltage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tbox.mcu.rsms.v1.BatteryTemperature battery_temperature = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_battery_temperature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RsmsData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.mcu.rsms.v1.RsmsData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tbox.mcu.rsms.v1.VehicleData vehicle_data = 1;
  if (this->has_vehicle_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::vehicle_data(this), target, stream);
  }

  // .tbox.mcu.rsms.v1.DriveMotor drive_motor = 2;
  if (this->has_drive_motor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::drive_motor(this), target, stream);
  }

  // .tbox.mcu.rsms.v1.Position position = 3;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::position(this), target, stream);
  }

  // .tbox.mcu.rsms.v1.Extremum extremum = 4;
  if (this->has_extremum()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::extremum(this), target, stream);
  }

  // .tbox.mcu.rsms.v1.Alarm alarm = 5;
  if (this->has_alarm()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::alarm(this), target, stream);
  }

  // .tbox.mcu.rsms.v1.BatteryVoltage battery_voltage = 6;
  if (this->has_battery_voltage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::battery_voltage(this), target, stream);
  }

  // .tbox.mcu.rsms.v1.BatteryTemperature battery_temperature = 7;
  if (this->has_battery_temperature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::battery_temperature(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.mcu.rsms.v1.RsmsData)
  return target;
}

size_t RsmsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tbox.mcu.rsms.v1.RsmsData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tbox.mcu.rsms.v1.VehicleData vehicle_data = 1;
  if (this->has_vehicle_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vehicle_data_);
  }

  // .tbox.mcu.rsms.v1.DriveMotor drive_motor = 2;
  if (this->has_drive_motor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *drive_motor_);
  }

  // .tbox.mcu.rsms.v1.Position position = 3;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .tbox.mcu.rsms.v1.Extremum extremum = 4;
  if (this->has_extremum()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extremum_);
  }

  // .tbox.mcu.rsms.v1.Alarm alarm = 5;
  if (this->has_alarm()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *alarm_);
  }

  // .tbox.mcu.rsms.v1.BatteryVoltage battery_voltage = 6;
  if (this->has_battery_voltage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *battery_voltage_);
  }

  // .tbox.mcu.rsms.v1.BatteryTemperature battery_temperature = 7;
  if (this->has_battery_temperature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *battery_temperature_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RsmsData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tbox.mcu.rsms.v1.RsmsData)
  GOOGLE_DCHECK_NE(&from, this);
  const RsmsData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RsmsData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tbox.mcu.rsms.v1.RsmsData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tbox.mcu.rsms.v1.RsmsData)
    MergeFrom(*source);
  }
}

void RsmsData::MergeFrom(const RsmsData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tbox.mcu.rsms.v1.RsmsData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_vehicle_data()) {
    _internal_mutable_vehicle_data()->::tbox::mcu::rsms::v1::VehicleData::MergeFrom(from._internal_vehicle_data());
  }
  if (from.has_drive_motor()) {
    _internal_mutable_drive_motor()->::tbox::mcu::rsms::v1::DriveMotor::MergeFrom(from._internal_drive_motor());
  }
  if (from.has_position()) {
    _internal_mutable_position()->::tbox::mcu::rsms::v1::Position::MergeFrom(from._internal_position());
  }
  if (from.has_extremum()) {
    _internal_mutable_extremum()->::tbox::mcu::rsms::v1::Extremum::MergeFrom(from._internal_extremum());
  }
  if (from.has_alarm()) {
    _internal_mutable_alarm()->::tbox::mcu::rsms::v1::Alarm::MergeFrom(from._internal_alarm());
  }
  if (from.has_battery_voltage()) {
    _internal_mutable_battery_voltage()->::tbox::mcu::rsms::v1::BatteryVoltage::MergeFrom(from._internal_battery_voltage());
  }
  if (from.has_battery_temperature()) {
    _internal_mutable_battery_temperature()->::tbox::mcu::rsms::v1::BatteryTemperature::MergeFrom(from._internal_battery_temperature());
  }
}

void RsmsData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tbox.mcu.rsms.v1.RsmsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RsmsData::CopyFrom(const RsmsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tbox.mcu.rsms.v1.RsmsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RsmsData::IsInitialized() const {
  return true;
}

void RsmsData::InternalSwap(RsmsData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RsmsData, battery_temperature_)
      + sizeof(RsmsData::battery_temperature_)
      - PROTOBUF_FIELD_OFFSET(RsmsData, vehicle_data_)>(
          reinterpret_cast<char*>(&vehicle_data_),
          reinterpret_cast<char*>(&other->vehicle_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RsmsData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace rsms
}  // namespace mcu
}  // namespace tbox
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tbox::mcu::rsms::v1::VehicleData* Arena::CreateMaybeMessage< ::tbox::mcu::rsms::v1::VehicleData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tbox::mcu::rsms::v1::VehicleData >(arena);
}
template<> PROTOBUF_NOINLINE ::tbox::mcu::rsms::v1::DriveMotor* Arena::CreateMaybeMessage< ::tbox::mcu::rsms::v1::DriveMotor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tbox::mcu::rsms::v1::DriveMotor >(arena);
}
template<> PROTOBUF_NOINLINE ::tbox::mcu::rsms::v1::SingleDriveMotor* Arena::CreateMaybeMessage< ::tbox::mcu::rsms::v1::SingleDriveMotor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tbox::mcu::rsms::v1::SingleDriveMotor >(arena);
}
template<> PROTOBUF_NOINLINE ::tbox::mcu::rsms::v1::Position* Arena::CreateMaybeMessage< ::tbox::mcu::rsms::v1::Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tbox::mcu::rsms::v1::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::tbox::mcu::rsms::v1::Extremum* Arena::CreateMaybeMessage< ::tbox::mcu::rsms::v1::Extremum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tbox::mcu::rsms::v1::Extremum >(arena);
}
template<> PROTOBUF_NOINLINE ::tbox::mcu::rsms::v1::Alarm* Arena::CreateMaybeMessage< ::tbox::mcu::rsms::v1::Alarm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tbox::mcu::rsms::v1::Alarm >(arena);
}
template<> PROTOBUF_NOINLINE ::tbox::mcu::rsms::v1::BatteryVoltage* Arena::CreateMaybeMessage< ::tbox::mcu::rsms::v1::BatteryVoltage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tbox::mcu::rsms::v1::BatteryVoltage >(arena);
}
template<> PROTOBUF_NOINLINE ::tbox::mcu::rsms::v1::SingleBatteryVoltage* Arena::CreateMaybeMessage< ::tbox::mcu::rsms::v1::SingleBatteryVoltage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tbox::mcu::rsms::v1::SingleBatteryVoltage >(arena);
}
template<> PROTOBUF_NOINLINE ::tbox::mcu::rsms::v1::BatteryTemperature* Arena::CreateMaybeMessage< ::tbox::mcu::rsms::v1::BatteryTemperature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tbox::mcu::rsms::v1::BatteryTemperature >(arena);
}
template<> PROTOBUF_NOINLINE ::tbox::mcu::rsms::v1::SingleBatteryTemperature* Arena::CreateMaybeMessage< ::tbox::mcu::rsms::v1::SingleBatteryTemperature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tbox::mcu::rsms::v1::SingleBatteryTemperature >(arena);
}
template<> PROTOBUF_NOINLINE ::tbox::mcu::rsms::v1::RsmsData* Arena::CreateMaybeMessage< ::tbox::mcu::rsms::v1::RsmsData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tbox::mcu::rsms::v1::RsmsData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
